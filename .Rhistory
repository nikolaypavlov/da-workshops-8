sum(l[l %% 3 == 0 | l %% 5 == 0])
l <- 1:100
sum(l[l %% 3 == 0 | l %% 5 == 0])
l[l %% 3 == 0 | l %% 5 == 0]
1:100[1:100 %% 3 == 0]
[1:100 %% 3 == 0]
1:100 %% 3 == 0
x = (0:100)
S = 2 * x[x ^ 2 > 3]
S
(function(x){return (x**2 + 2*x + 1)})(1:100)
d <- read.csv("~/Downloads/SW-2014_12_19-newUsers.csv")
d
d$New.Users
mean(d$New.Users)
d$New.Users
d$Date
as.Date(d$Date)
d <- read.csv("~/Downloads/iTunes-sales-2014-02-01-2014-12-01.csv")
d
mean(d)
class(d)
d
d[1,]
mean(d[1,])
as.numeric(d[1,])
as.numeric(d[1,3:13])
as.numeric(d[1,3:14])
as.numeric(d[1,3:11])
mean(as.numeric(d[1,3:11]))
mean(as.numeric(d[1,3:12]))
as.numeric(d[1,3:11])
as.integer(d[1,3:11])
as.integer(d[1,3:12])
detach("package:datasets", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:methods", unload=TRUE)
detach("package:utils", unload=TRUE)
detach("package:stats", unload=TRUE)
methods(mean)
library("methods", lib.loc="/usr/local/Cellar/r/3.1.1/R.framework/Versions/3.1/Resources/library")
methods(mean)
library(methods)
methods(mean)
library(methods)
methods(mean)
getMethods(lm)
getMethod(lm)
?getMethods
getMethods(plot)
getMethods("plot")
showMethods("plot")
showMethods("lm")
showMethods("lsit")
showMethods("list")
showMethods("ts")
library(ts)
library(zoo)
showMethods("zoo")
showMethods("glm")
library(nnet)
showMethods("nnet")
library(randomForest)
showMethods("randmoForest")
library(caret)
showMethods("train")
showMethods("predict")
showMethods("plot")
library(methods)
showMethods("")
showMethods("plot")
showMethods(plot.train)
showMethods("plot.train")
?showMethods
require("Matrix")
showMethods("%*%")#
getClass("%*%")
getMethod("%*%")
methods(lm)
methods(predict)
methods(colSums)
?ccf
v <- c()
for (i in seq_along(x)) {
z <- 0
for (n in seq_along(y)) {
z <- z + x[i]*y[n]
}
v <- append(v, z)
}
x <- c(1,2,3,4,1,2,7,0,0)
y <- c(1,1,1)
v <- c()
for (i in seq_along(x)) {
z <- 0
for (n in seq_along(y)) {
z <- z + x[i]*y[n]
}
v <- append(v, z)
}
v
y <- c(0,0,1,1,1,0,0)
source('~/.active-rstudio-document')
v
y <- c(1,1,1)
source('~/.active-rstudio-document')
x <- c(1,2,3,4,1,2)
source('~/.active-rstudio-document')
x <- c(2,2,3,4,1,2)
source('~/.active-rstudio-document')
print(v)
source('~/.active-rstudio-document')
4*0.75
3 / 0.75
3 / 5
1.2*5
5*1.2
6/5
6%5
mod(6,5)
6 % 5
Mod(6,5)
?Mod
6 %% 5
6 - 3 + 1
sum(c(2,3,7,5,6)) / 5
sum(c(2,3,7,5,6))
sum(c(2,3,7,5,6)) / 5
3.6 * 5
sum(c(3,7,5,6))
sum(c(7,5,6))
7 + 5 - 1
7 + 5
7 + 5 - 1
7 + 3 - 1
6 + 3 - 1
11 / 3
6 + 3 - 1
8 - 6
7 + 3 -1
7 + 3 - 1
6 + 5 - 1
6 + 5 - 1 - 6
6 + 3 - 1 - 6
7 + 3 - 1 - 7
7 + 5 - 1 - 7
3 - 1
11 / 5
5 - 1
7 + 5 + 6
18 / 5
6 / 5
5 - 1
5 + 6 + 9
20 / 5
source('~/.active-rstudio-document')
x
source('~/.active-rstudio-document')
x
source('~/.active-rstudio-document')
res
source('~/.active-rstudio-document')
size
source('~/.active-rstudio-document')
res
source('~/.active-rstudio-document')
res
source('~/.active-rstudio-document')
seq_along(size)
source('~/.active-rstudio-document')
w <- 3
source('~/.active-rstudio-document')
1:1
source('~/.active-rstudio-document')
x
3 / 3
0.666667 * 3
source('~/.active-rstudio-document')
x^2
source('~/.active-rstudio-document')
library(signal)
library(tuneR)
w <- readWave("~/Downloads/bruxlab-recording-2015-04-07T03-57-30-1D2BFB3C.wav")
w
?write
?writeBin
writeBin("~/bruxlab-audio-smp3.dat", what="numeric", object=w@left)
writeBin("~/bruxlab-audio-smp3.dat", object=w@left, size=4)
head(w@left)
w1 <- readBin("~/bruxlab-audio-smp3.dat", what="numeric", size=4)
head(w1)
w1
w1 <- readBin("~/bruxlab-audio-smp3.dat", what="numeric", n=10000, size=4)
head(w1)
seq(-10,10)
seq(-10,10) * 2
seq(-10,10) * 2 + c(-1000,500,-1)
sort(seq(-10,10) * 2 + c(-1000,500,-1))
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D9
summary(lm.D9)
?step
step(lm.D9)
summary(lm1 <- lm(Fertility ~ ., data = swiss))
slm1 <- step(lm1)
summary(slm1)
summary(lm1 <- lm(Fertility ~ ., data = swiss))
slm1 <- step(lm1)
summary(slm1)
head(swiss)
step
install.packages("manipulate")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("caret")
install.packages("reshape2")
install.packages("randomForest")
install.packages("e1071")
install.packages("stringi")
library(tuneR)
install.packages("tuneR")
install.packages("seewave")
install.packages("tuneR")
install.packages("manipulate")
install.packages("tuneR")
library(tuneR)
install.packages("seewave")
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-18T21-23-40-27049039.wav")
writeBin("~/bruxlab-audio-smp6.dat", object=w@left, size=4)
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-18T23-57-05-41ED99BC.wav")
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-19T00-00-02-6AC4CA03.wav")
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-18T23-40-22-4D76A561.wav")
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-19T00-48-14-1556CB47.wav")
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-19T01-20-41-66A3082F.wav")
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-19T03-06-54-2C9A6C47.wav")
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
w[3385]
w@left[3385]
w@left[3386]
w@left[3300]
w@left[3000]
w@left[2000]
w@left[1000]
w@left[10]
w@left[1]
w@left[3]
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-19T04-03-56-A433AFBE.wav")
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
w <- readWave("~/Downloads/segments - Apr 17 - 21.23/bruxlab-recording-2015-04-18T23-40-22-4D76A561.wav")
writeBin("~/bruxlab-audio-smp7.dat", object=w@left, size=4)
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
install.packages("devtools")
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
library(devtools)
install_github("amplab-extras/SparkR-pkg")
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
library(devtools)
install_github("amplab-extras/SparkR-pkg/pkg")
c(2, 18, 9, 22, 17, 24, 8, 12, 27)
sum(c(2, 18, 9, 22, 17, 24, 8, 12, 27))
w <- readWave("~/Downloads/segments - Apr 22 - 23.19/bruxlab-recording-2015-04-22T23-19-15-8182BBE6.wav")
library(tuneR)
w <- readWave("~/Downloads/segments - Apr 22 - 23.19/bruxlab-recording-2015-04-22T23-19-15-8182BBE6.wav")
w
writeBin("~/bruxlab-audio-smp6.dat", object=w@left, size=4)
choose(3,2)
choose(4,2)
choose(3,2)
2^3
choose(1000, 3) - 3
choose(1000, 3)
choose(1000, 2)
choose(1000, 2) - 3
choose(4,2)
choose(2,2)
2^3
choose(2,2)
choose(3,2)
choose(3,2)!
factorial(choose(3,2))
factorial(choose(2,2))
mean(c(1,2,3))
mean(c(4,5,6,7,8))
mean(c(1,2,3,4,5,6,7,8))
(2+6)/2
mean(c(1,2,3,6,7,8))
mean(c(1,2,3))
mean(c(6,7,8))
(2+7)/2
mean(c(1,2,3))
mean(c(6,7,8,9))
(2+7.5)/2
mean(c(1,2,3,6,7,8,9))
dnorm(1)
pnorm(1)
?pnorm
pnorm(1)*0,25
pnorm(1)*0.25
pnorm(1)*0,25 / sum(pnorm(1) * 0.25, pnorm(1, -2, 3) * 0.75)
pnorm(1)*0,25 / sum(c(pnorm(1) * 0.25, pnorm(1, -2, 3) * 0.75))
pnorm(1)*0.25 / sum(c(pnorm(1) * 0.25, pnorm(1, -2, 3) * 0.75))
dnorm(1)*0.25 / sum(c(dnorm(1) * 0.25, dnorm(1, -2, 3) * 0.75))
?dnorm
dnorm(1)*0.25 / sum(c(dnorm(1) * 0.25, dnorm(1, -2, 3) * 0.75))
dnorm(c(-5,5,15))
dnorm(c(-5,5,15), 0, 5)
prod(dnorm(c(-5,5,15), 0, 5))
0.0483941449 * 0.0483941449 * 0.0008863697
prod(dnorm(c(-5,5,15), 0, 5))
prod(dnorm(c(-5,5,15), 5, 10))
prod(dnorm(c(-5,5,15), 5, 5))
prod(dnorm(c(-5,5,15), 10, 5))
plot(data.frame(1:5, 2,3))
table(1:5,seq(3,6))
table(1:3,seq(3,6))
table(1:3,5:7)
plot(table(1:3,5:7))
class(table(1:3,5:7))
plot(dens(seq(1:20)))
plot(density(seq(1:20)))
?plot
library(signal)
?plot.specgram
30 / 60
40 / 80
1
(30+40+60) / 200
(50 + 10 + 40) / 200
choose(9,2)
choose(9,2) + choose(2,2)
choose(9,2) + choose(2,2) + choose(8,2)
choose(9,2) + choose(2,2) + choose(8,2) + choose(1,2)
choose(9,2) + choose(2,2) + choose(8,2)
tp <- choose(9,2) + choose(2,2) + choose(8,2)
fn <- choose(11,2) + choose(9,2)
fn <- choose(11,2) + choose(9,2) - tp
fn
fp <- choose(10,2) + choose(10,2) - tp
fp
tn <- choose(18,2) - tp - fn - fp
tn
tn <- choose(20,2) - tp - fn - fp
tn
install.packages("NbClust")
library("NbClust")
data(iris)
set.seed(26)
iris$Species=NULL
clusterNo=NbClust(iris,distance="euclidean",min.nc=2,max.nc=10,method="complete",index="all")
clusterNo
plot(iris$Sepal.Length, iris$Sepal.Width, col=clusterNo$Best.partition)
plot(iris$Sepal.Length, iris$Petal.Width, col=clusterNo$Best.partition)
source('~/.active-rstudio-document')
plot(iris$Sepal.Length, iris$Petal.Width, col=clusterNo$Best.partition)
library(randomForest)
m1 <- randomForest(species ~ ., data=iris)
iris
data(iris)
iris
m1 <- randomForest(Species ~ ., data=iris)
m1
m2 <- randomForest(Species ~ ., data=iris, mtry = 100)
m2 <- randomForest(Species ~ ., data=iris, mtry = 50)
m2 <- randomForest(Species ~ ., data=iris, mtry = 10)
?randomForest
m2 <- randomForest(Species ~ ., data=iris, mtry = 4)
m2
m1
m2
m1
iris
mtcars
oson
datasets
data
datasets()
dataset()
data()
OrchardSprays
sample(1:dim(OrchardSprays)[1])
sample(1:dim(OrchardSprays)[1] > 0.20)
1:dim(OrchardSprays)[1] > 0.20
1:dim(OrchardSprays)[1]
sample(1:dim(OrchardSprays)[1] > n*0.20)
sample(1:dim(OrchardSprays)[1] > n*0.25)
n
sample(1:dim(OrchardSprays)[2] > n*0.25)
1:dim(OrchardSprays)[1]
dim(OrchardSprays)[1]
n
n = dim(OrchardSprays)[1]
sample(1:n > n*0.25)
sample(1:n > n*0.2)
trainSet
source('~/.active-rstudio-document')
test <- OrchardSprays[!trainSet,]
source('~/.active-rstudio-document')
train
x <- tapply(train[, "decrease"], train[, "treatment"], mean)
x
x <- data.frame(row.names(x),x, row.names = NULL)
x
temp <- data.frame(c(rep(0,nrow(test))), row.names = NULL)
temp
temp <- data.frame(temp, round(lookup(test[,variable], x),2))
library(qdapTools)
install.packages("qdapTools")
library(qdapTools)
?qdapTools
qdapTools
help(qdapTools)
lookup(test[,"treatment"])
lookup(test[,"treatment"], x)
x
dim(x)
lookup(test[,"treatment"], x)
round(lookup(test[,"treatment"], x)
)
round(lookup(test[,"treatment"], x))
temp <- data.frame(temp, round(lookup(test[,variable], x),2))
temp <- data.frame(c(rep(0,nrow(test))), row.names = NULL)
temp <- data.frame(temp, round(lookup(test[,variable], x),2))
temp <- data.frame(temp, round(lookup(test[, "treatment"], x),2))
temp
round(lookup(test[, "treatment"], x),2)
colnames(temp)[ncol(temp)] <- paste(metric,variable, sep = "_")
ncol(temp)
colnames(temp)[ncol(temp)]
colnames(temp)[ncol(temp)] <- paste("mean", "treatment", sep = "_")
temp
temp[,-1]
data.frame(head(train$treatment))
choose(10, 4)
(5*60 + 5) / 22
364.485557286 / 21
346.4 / 60
352.09844926 / 21.198323684
352.09844926 * 3
63299124460 / 6
5 * 60
300 + 5
305 / 22
install.packages("combinat")
library(combinat)
?permn
permn(3)
perm = function(n, x) {
return(factorial(n) / factorial(n-x))
}
perm(20, 4)
perm(10, 4)
perm(10, 5)
perm(10, 3)
perm(10, 4)
library(HMM)
load(file="data/orderedFeatures.rdata")
load(file="data/example_labels.rdata")
iris[iris$Sepal.Length < 5, ]
iris[iris$Sepal.Length < 5, ] * 2
iris[iris$Sepal.Length < 5, 1] * 2
iris[iris$Sepal.Length < 5, 1:4] * 2
setwd("~/repos/r-workshop/")
# Import data
train <- read.csv("data/train.csv")
test <- read.csv("data/test.csv")
# Was the data written correctly? - dim(), names(), nrow(), ncol(), head(), tail()
print(dim(train))
setwd("~/repos/r-workshop/")
source("code/data_summarization_and_cleaning.R")
# Load additional libraries
library(tree)
library(randomForest)
library(nnet)
library(caret)
library(e1071)
# Which model to choose from?
#
# Make a data prediction model using Random Forest
#
set.seed(123) # To make it reproducible
model <- randomForest(activity ~ ., data=train, na.action=na.omit)
#
# Make a data prediction model using MLP Neural Network
#
model
predictions <- predict(model, newdata=test, type="class")
print(confusionMatrix(predictions, test$activity))
benchmark_model <- tree(activity ~ ., data = train)
benchmark_pred <- predict(benchmark_model, newdata=test, type="class")
benchmark <- confusionMatrix(benchmark_pred, test$activity)$overall[1]
plot(benchmark_model)
text(benchmark_model)
print(benchmark_model)
benchmark <- confusionMatrix(benchmark_pred, test$activity)$overall[1]
benchmark
source('~/repos/r-workshop/code/ml-diagnostic.R')
source('~/repos/r-workshop/code/model_tunning.R')
